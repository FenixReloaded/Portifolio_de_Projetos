#BlueJ class context
comment0.target=Picture
comment0.text=\r\n\ \ <p><b>Overview.</b>\r\n\ \ The\ {@code\ Picture}\ class\ provides\ a\ basic\ capability\ for\ manipulating\r\n\ \ the\ individual\ pixels\ of\ an\ image.\r\n\ \ You\ can\ either\ create\ a\ blank\ image\ (of\ a\ given\ dimension)\ or\ read\ an\r\n\ \ image\ in\ a\ supported\ file\ format\ (typically\ JPEG,\ PNG,\ GIF\ TIFF,\ and\ BMP).\r\n\ \ This\ class\ also\ includes\ methods\ for\ displaying\ the\ image\ in\ a\ window\r\n\ \ and\ saving\ it\ to\ a\ file.\r\n\r\n\ \ <p>\r\n\ \ <b>Use\ in\ the\ curriculum.</b>\r\n\ \ The\ {@code\ Picture}\ class\ is\ intended\ for\ use\ in\ the\r\n\ \ curriculum\ once\ objects\ are\ introduced.\r\n\ \ The\ {@link\ StdPicture}\ class\ is\ intended\ for\ earlier\ use\ in\r\n\ \ the\ curriculum,\ before\ objects\ (but\ it\ can\ support\ only\ one\r\n\ \ picture\ at\ a\ time).\r\n\ \ See\ {@link\ GrayscalePicture}\ for\ a\ version\ that\ supports\r\n\ \ grayscale\ images.\r\n\r\n\ \ <p>\r\n\ \ <b>Getting\ started.</b>\r\n\ \ To\ use\ this\ class,\ you\ must\ have\ {@code\ Picture}\ in\ your\ Java\ classpath.\r\n\ \ Here\ are\ three\ possible\ ways\ to\ do\ this\:\r\n\ \ <ul>\r\n\ \ <li>\ If\ you\ ran\ our\ autoinstaller,\ use\ the\ commands\r\n\ \ {@code\ javac-introcs}\ and\ {@code\ java-introcs}\ (or\ {@code\ javac-algs4}\r\n\ \ and\ {@code\ java-algs4})\ when\ compiling\ and\ executing.\ These\ commands\r\n\ \ add\ {@code\ stdlib.jar}\ (or\ {@code\ algs4.jar})\ to\ the\ Java\ classpath,\ which\r\n\ \ provides\ access\ to\ {@code\ Picture}.\r\n\r\n\ \ <li>\ Download\ <a\ href\ \=\ "https\://introcs.cs.princeton.edu/java/code/stdlib.jar">stdlib.jar</a>\r\n\ \ (or\ <a\ href\ \=\ "https\://algs4.cs.princeton.edu/code/algs4.jar">algs4.jar</a>)\r\n\ \ and\ add\ it\ to\ the\ Java\ classpath.\r\n\r\n\ \ <li>\ Download\ <a\ href\ \=\ "https\://introcs.cs.princeton.edu/java/stdlib/StdPicture.java">StdPicture.java</a>\r\n\ \ and\r\n\ \ <a\ href\ \=\ "https\://introcs.cs.princeton.edu/java/stdlib/Picture.java">Picture.java</a>\r\n\ \ and\ put\ them\ in\ the\ working\ directory.\r\n\ \ </ul>\r\n\r\n\ \ <p>\r\n\ \ As\ a\ test,\ cut-and-paste\ the\ following\ short\ program\ into\ your\ editor\:\r\n\ \ <pre>\r\n\ \ \ public\ class\ TestPicture\ {\r\n\ \ \ \ \ \ \ public\ static\ void\ main(String[]\ args)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ Picture\ picture\ \=\ new\ Picture("https\://introcs.cs.princeton.edu/java/stdlib/mandrill.jpg");\r\n\ \ \ \ \ \ \ \ \ \ \ picture.show();\r\n\ \ \ \ \ \ \ }\r\n\ \ \ }\r\n\ \ </pre>\r\n\ \ <p>\r\n\ \ If\ you\ compile\ and\ execute\ the\ program,\ you\ should\ see\ a\ picture\ of\ a\ mandrill\r\n\ \ (a\ colorful\ monkey\ native\ to\ west-central\ Africa)\ in\ a\ window.\r\n\r\n\ \ <p>\r\n\ \ <b>Anatomy\ of\ an\ image.</b>\r\n\ \ An\ image\ is\ a\ <em>width</em>-by-<em>height</em>\ grid\ of\ pixels,\ with\ pixel\ (0,\ 0)\r\n\ \ in\ the\ upper-left\ corner.\r\n\ \ Each\ pixel\ has\ a\ color\ that\ is\ represented\ using\ the\ <em>RGB\ color\ model</em>,\r\n\ \ which\ specifies\ the\ levels\ of\ <em>red</em>\ (R),\ <em>green</em>\ (G),\ and\ <em>blue</em>\ (B)\r\n\ \ on\ an\ integer\ scale\ from\ 0\ to\ 255.\r\n\r\n\ \ <blockquote>\r\n\ \ <img\ src\ \=\ "https\://introcs.cs.princeton.edu/java/stdlib/AnatomyImage.png"\ width\ \=\ 200\ alt\ \=\ "anatomy\ of\ an\ image">\r\n\ \ </blockquote>\r\n\r\n\ \ <p>\r\n\ \ <b>Creating\ pictures.</b>\r\n\ \ You\ can\ use\ the\ following\ constructors\ to\ create\ new\ {@code\ Picture}\ objects\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#Picture(String\ filename)}\r\n\ \ <li>\ {@link\ \#Picture(int\ width,\ int\ height)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ first\ constructor\ read\ an\ image\ in\ a\ supported\ file\ format\r\n\ \ (typically\ JPEG,\ PNG,\ GIF\ TIFF,\ and\ BMP)\r\n\ \ and\ initializes\ the\ picture\ to\ that\ image.\r\n\ \ The\ second\ constructor\ creates\ a\ <em>width</em>-by-<em>height</em>\ picture,\r\n\ \ with\ each\ pixel\ black.\r\n\r\n\ \ <p>\r\n\ \ <b>Getting\ and\ setting\ the\ colors\ of\ the\ individual\ pixels.</b>\r\n\ \ You\ can\ use\ the\ following\ methods\ to\ get\ and\ set\ the\ color\ of\ a\r\n\ \ specified\ pixel\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#get(int\ col,\ int\ row)}\r\n\ \ <li>\ {@link\ \#set(int\ col,\ int\ row,\ Color\ color)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ first\ method\ returns\ the\ color\ of\ pixel\ (<em>col</em>,\ <em>row</em>)\r\n\ \ as\ a\ {@code\ Color}\ object.\r\n\ \ The\ second\ method\ set\ the\ color\ of\ pixel\ (<em>col</em>,\ <em>row</em>)\ to\r\n\ \ the\ specified\ color.\r\n\r\n\ \ <p><b>Iterating\ over\ the\ pixels.</b>\r\n\ \ A\ common\ operation\ in\ image\ processing\ is\ to\ iterate\ over\ and\ process\r\n\ \ all\ of\ the\ pixels\ in\ an\ image.\r\n\ \ Here\ is\ a\ prototypical\ example\ that\ creates\ a\ grayscale\ version\ of\ a\ color\ image,\r\n\ \ using\ the\ NTSC\ formula\r\n\ \ <em>Y</em>\ \=\ 0.299<em>r</em>\ +\ 0.587<em>g</em>\ +\ 0.114<em>b</em>.\r\n\ \ Note\ that\ if\ the\ red,\ green,\ and\ blue\ components\ of\ an\ RGB\ color\r\n\ \ are\ all\ equal,\ the\ color\ is\ a\ shade\ of\ gray.\r\n\ \ <pre>\r\n\ \ Picture\ picture\ \ \ \=\ new\ Picture("https\://introcs.cs.princeton.edu/java/stdlib/mandrill.jpg");\r\n\ \ Picture\ grayscale\ \=\ new\ Picture(picture.width(),\ picture.height());\r\n\ \ for\ (int\ col\ \=\ 0;\ col\ &lt;\ picture.width();\ col++)\ {\r\n\ \ \ \ \ \ for\ (int\ row\ \=\ 0;\ row\ &lt;\ picture.height();\ row++)\ {\r\n\ \ \ \ \ \ \ \ \ \ Color\ color\ \=\ picture.get(col,\ row);\r\n\ \ \ \ \ \ \ \ \ \ int\ r\ \=\ color.getRed();\r\n\ \ \ \ \ \ \ \ \ \ int\ g\ \=\ color.getGreen();\r\n\ \ \ \ \ \ \ \ \ \ int\ b\ \=\ color.getBlue();\r\n\ \ \ \ \ \ \ \ \ \ int\ y\ \=\ (int)\ (Math.round(0.299*r\ +\ 0.587*g\ +\ 0.114*b));\r\n\ \ \ \ \ \ \ \ \ \ Color\ gray\ \=\ new\ Color(y,\ y,\ y);\r\n\ \ \ \ \ \ \ \ \ \ grayscale.set(col,\ row,\ gray);\r\n\ \ \ \ \ \ }\r\n\ \ }\r\n\ \ picture.show();\r\n\ \ grayscale.show();\r\n\ \ </pre>\r\n\r\n\ \ <p><b>Saving\ files.</b>\r\n\ \ The\ {@code\ Picture}\ class\ supports\ writing\ images\ to\ a\ supported\r\n\ \ file\ format\ (typically\ JPEG,\ PNG,\ GIF\ TIFF,\ and\ BMP).\r\n\ \ Note\ that\ some\ file\ formats\ (such\ as\ JPEG\ and\ BMP)\ do\ not\ support\r\n\ \ transparency.\r\n\ \ You\ can\ save\ the\ picture\ to\ a\ file\ using\ these\ two\ methods\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#save(String\ filename)}\r\n\ \ <li>\ {@link\ \#save(File\ file)}\r\n\ \ </ul>\r\n\r\n\ \ <p>Alternatively,\ you\ can\ save\ the\ picture\ interactively\r\n\ \ by\ using\ the\ menu\ option\ <em>File\ \u2192\ Save</em>\ from\ the\ picture\ window.\r\n\r\n\ \ <p><b>Transparency.</b>\r\n\ \ Both\ the\ {@link\ Color}\ and\ {@code\ Picture}\ classes\ support\r\n\ \ transparency,\ using\ the\ <em>alpha\ channel</em>.\r\n\ \ The\ alpha\ value\ defines\ the\ transparency\ of\ a\ color,\ with\ 0\ corresponding\ to\r\n\ \ completely\ transparent\ and\ 255\ to\ completely\ opaque.\ If\ transparency\ is\ not\r\n\ \ explicitly\ used,\ all\ alpha\ values\ are\ 255.\r\n\r\n\ \ <p><b>32-bit\ color.</b>\r\n\ \ Sometimes\ it\ is\ more\ convenient\ (or\ efficient)\ to\ manipulate\ the\r\n\ \ color\ of\ a\ pixel\ as\ a\ single\ 32-bit\ integers\ instead\ of\ four\ 8-bit\ components.\r\n\ \ The\ following\ methods\ support\ this\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#getRGB(int\ col,\ int\ row)}\r\n\ \ <li>\ {@link\ \#setRGB(int\ col,\ int\ row,\ int\ rgb)}\r\n\ \ </ul>\r\n\ \ <p>\r\n\ \ The\ red\ (R),\ green\ (G),\ and\ blue\ (B)\ components\r\n\ \ are\ encoded\ using\ the\ least\ significant\ 24\ bits.\r\n\ \ Given\ a\ 32-bit\ {@code\ int}\ encoding\ the\ color,\ the\ following\ code\ extracts\r\n\ \ the\ ARGB\ components\:\r\n\ <blockquote><pre>\r\n\ \ int\ a\ \=\ (rgb\ &gt;&gt;\ 24)\ &amp;\ 0xFF;\r\n\ \ int\ r\ \=\ (rgb\ &gt;&gt;\ 16)\ &amp;\ 0xFF;\r\n\ \ int\ g\ \=\ (rgb\ &gt;&gt;\ \ 8)\ &amp;\ 0xFF;\r\n\ \ int\ b\ \=\ (rgb\ &gt;&gt;\ \ 0)\ &amp;\ 0xFF;\r\n\ \ </pre></blockquote>\r\n\ \ Given\ the\ ARGB\ components\ (8-bits\ each)\ of\ a\ color,\r\n\ \ the\ following\ statement\ packs\ it\ into\ a\ 32-bit\ {@code\ int}\:\r\n\ \ <blockquote><pre>\r\n\ \ int\ argb\ \=\ (a\ &lt;&lt;\ 24)\ |\ (r\ &lt;&lt;\ 16)\ |\ (g\ &lt;&lt;\ 8)\ |\ (b\ &lt;&lt;\ 0);\r\n\ \ </pre></blockquote>\r\n\r\n\ \ <p><b>Coordinates.</b>\r\n\ \ Pixel\ (<em>col</em>,\ <em>row</em>)\ is\ column\ <em>col</em>\ and\ row\ <em>row</em>.\r\n\ \ By\ default,\ the\ origin\ (0,\ 0)\ is\ the\ pixel\ in\ the\ upper-left\ corner.\r\n\ \ These\ are\ common\ conventions\ in\ image\ processing\ and\ consistent\ with\ Java's\r\n\ \ {@link\ java.awt.image.BufferedImage}\ data\ type.\ The\ following\r\n\ \ two\ methods\ allow\ you\ to\ change\ this\ convention\:\r\n\ \ <ul>\r\n\ \ <li>\ {@link\ \#setOriginLowerLeft()}\r\n\ \ <li>\ {@link\ \#setOriginUpperLeft()}\r\n\ \ </ul>\r\n\r\n\ \ <p><b>Memory\ usage.</b>\r\n\ \ A\ <em>W</em>-by-<em>H</em>\ picture\ uses\ ~\ 4\ <em>W\ H</em>\ bytes\ of\ memory,\r\n\ \ since\ the\ color\ of\ each\ pixel\ is\ encoded\ as\ a\ 32-bit\ <code>int</code>.\r\n\r\n\ \ <p><b>Additional\ documentation.</b>\r\n\ \ For\ additional\ documentation,\ see\r\n\ \ <a\ href\="https\://introcs.cs.princeton.edu/31datatype">Section\ 3.1</a>\ of\r\n\ \ <i>Computer\ Science\:\ An\ Interdisciplinary\ Approach</i>\r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=width\ height
comment1.target=Picture(int,\ int)
comment1.text=\r\n\ Creates\ a\ {@code\ width}-by-{@code\ height}\ picture,\ with\ {@code\ width}\ columns\r\n\ and\ {@code\ height}\ rows,\ where\ each\ pixel\ is\ black.\r\n\r\n\ @param\ width\ the\ width\ of\ the\ picture\r\n\ @param\ height\ the\ height\ of\ the\ picture\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ width}\ is\ negative\ or\ zero\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ height}\ is\ negative\ or\ zero\r\n
comment10.params=
comment10.target=void\ show()
comment10.text=\r\n\ Displays\ the\ picture\ in\ a\ window\ on\ the\ screen.\r\n
comment11.params=
comment11.target=void\ hide()
comment11.text=\r\n\ Hides\ the\ window\ on\ the\ screen.\r\n
comment12.params=
comment12.target=boolean\ isVisible()
comment12.text=\r\n\ Is\ the\ window\ containing\ the\ picture\ visible?\r\n\ @return\ {@code\ true}\ if\ the\ picture\ is\ visible,\ and\ {@code\ false}\ otherwise\r\n
comment13.params=
comment13.target=int\ height()
comment13.text=\r\n\ Returns\ the\ height\ of\ the\ picture.\r\n\r\n\ @return\ the\ height\ of\ the\ picture\ (in\ pixels)\r\n
comment14.params=
comment14.target=int\ width()
comment14.text=\r\n\ Returns\ the\ width\ of\ the\ picture.\r\n\r\n\ @return\ the\ width\ of\ the\ picture\ (in\ pixels)\r\n
comment15.params=row
comment15.target=void\ validateRowIndex(int)
comment16.params=col
comment16.target=void\ validateColumnIndex(int)
comment17.params=col\ row
comment17.target=java.awt.Color\ get(int,\ int)
comment17.text=\r\n\ Returns\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ as\ a\ {@link\ java.awt.Color}.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @return\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment18.params=col\ row
comment18.target=int\ getRGB(int,\ int)
comment18.text=\r\n\ Returns\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ as\ an\ {@code\ int}.\r\n\ Using\ this\ method\ can\ be\ more\ efficient\ than\ {@link\ \#get(int,\ int)}\ because\r\n\ it\ does\ not\ create\ a\ {@code\ Color}\ object.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @return\ the\ integer\ representation\ of\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment19.params=col\ row\ color
comment19.target=void\ set(int,\ int,\ java.awt.Color)
comment19.text=\r\n\ Sets\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ to\ given\ color.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @param\ color\ the\ color\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ color}\ is\ {@code\ null}\r\n
comment2.params=picture
comment2.target=Picture(Picture)
comment2.text=\r\n\ Creates\ a\ new\ picture\ that\ is\ a\ deep\ copy\ of\ the\ argument\ picture.\r\n\r\n\ @param\ \ picture\ the\ picture\ to\ copy\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ picture}\ is\ {@code\ null}\r\n
comment20.params=col\ row\ rgb
comment20.target=void\ setRGB(int,\ int,\ int)
comment20.text=\r\n\ Sets\ the\ color\ of\ pixel\ ({@code\ col},\ {@code\ row})\ to\ given\ color.\r\n\r\n\ @param\ col\ the\ column\ index\r\n\ @param\ row\ the\ row\ index\r\n\ @param\ rgb\ the\ integer\ representation\ of\ the\ color\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ col\ <\ width}\ and\ {@code\ 0\ <\=\ row\ <\ height}\r\n
comment21.params=other
comment21.target=boolean\ equals(java.lang.Object)
comment21.text=\r\n\ Returns\ true\ if\ this\ picture\ is\ equal\ to\ the\ argument\ picture.\r\n\r\n\ @param\ other\ the\ other\ picture\r\n\ @return\ {@code\ true}\ if\ this\ picture\ is\ the\ same\ dimension\ as\ {@code\ other}\r\n\ \ \ \ \ \ \ \ \ and\ if\ all\ pixels\ have\ the\ same\ color;\ {@code\ false}\ otherwise\r\n
comment22.params=
comment22.target=java.lang.String\ toString()
comment22.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ picture.\r\n\ The\ result\ is\ a\ <code>width</code>-by-<code>height</code>\ matrix\ of\ pixels,\r\n\ where\ the\ color\ of\ a\ pixel\ is\ represented\ using\ 6\ hex\ digits\ to\ encode\r\n\ the\ red,\ green,\ and\ blue\ components.\r\n\r\n\ @return\ a\ string\ representation\ of\ this\ picture\r\n
comment23.params=
comment23.target=int\ hashCode()
comment23.text=\r\n\ This\ operation\ is\ not\ supported\ because\ pictures\ are\ mutable.\r\n\r\n\ @return\ does\ not\ return\ a\ value\r\n\ @throws\ UnsupportedOperationException\ if\ called\r\n
comment24.params=title
comment24.target=void\ setTitle(java.lang.String)
comment24.text=\r\n\ Sets\ the\ title\ of\ this\ picture.\r\n\ @param\ title\ the\ title\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ title}\ is\ {@code\ null}\r\n
comment25.params=
comment25.target=boolean\ hasAlpha()
comment26.params=filename
comment26.target=void\ save(java.lang.String)
comment26.text=\r\n\ Saves\ the\ picture\ to\ a\ file\ in\ a\ supported\ file\ format\r\n\ (typically\ JPEG,\ PNG,\ GIF\ TIFF,\ and\ BMP).\r\n\ If\ the\ file\ format\ does\ not\ support\ transparency\ (such\ as\ JPEG\r\n\ or\ BMP),\ it\ will\ be\ converted\ to\ be\ opaque\ (with\ purely\r\n\ transparent\ pixels\ converted\ to\ black).\r\n\r\n\ @param\ filename\ the\ name\ of\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ filename}\ is\ the\ empty\ string\r\n
comment27.params=file
comment27.target=void\ save(java.io.File)
comment27.text=\r\n\ Saves\ the\ picture\ to\ a\ file\ in\ a\ supported\ format\r\n\ (typically\ JPEG,\ PNG,\ GIF\ TIFF,\ and\ BMP).\r\n\r\n\ @param\ \ file\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ file}\ is\ {@code\ null}\r\n
comment28.params=e
comment28.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment28.text=\r\n\ Opens\ a\ save\ dialog\ box\ when\ the\ user\ selects\ "Save\ As"\ from\ the\ menu.\r\n
comment29.params=args
comment29.target=void\ main(java.lang.String[])
comment29.text=\r\n\ Unit\ tests\ this\ {@code\ Picture}\ data\ type.\r\n\ Reads\ a\ picture\ specified\ by\ the\ command-line\ argument,\r\n\ and\ shows\ it\ in\ a\ window\ on\ the\ screen.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment3.params=filename
comment3.target=Picture(java.lang.String)
comment3.text=\r\n\ Creates\ a\ picture\ by\ reading\ a\ JPEG,\ PNG,\ or\ GIF\ image\ from\ a\ file\ or\ URL.\r\n\ The\ filetype\ extension\ must\ be\ {@code\ .jpg},\ {@code\ .png},\ or\ {@code\ .gif}.\r\n\r\n\ @param\ \ filename\ the\ name\ of\ the\ file\ or\ URL\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ read\ image\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ name}\ is\ {@code\ null}\r\n
comment4.params=file
comment4.target=Picture(java.io.File)
comment4.text=\r\n\ Creates\ a\ picture\ by\ reading\ the\ image\ from\ a\ JPEG,\ PNG,\ or\ GIF\ file.\r\n\r\n\ @param\ file\ the\ file\r\n\ @throws\ IllegalArgumentException\ if\ cannot\ read\ image\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ file}\ is\ {@code\ null}\r\n
comment5.params=
comment5.target=javax.swing.JFrame\ createGUI()
comment6.params=e
comment6.target=void\ windowClosing(java.awt.event.WindowEvent)
comment7.params=
comment7.target=javax.swing.JLabel\ getJLabel()
comment7.text=\r\n\ Returns\ a\ {@link\ JLabel}\ containing\ this\ picture,\ for\ embedding\ in\ a\ {@link\ JPanel},\r\n\ {@link\ JFrame}\ or\ other\ GUI\ widget.\r\n\r\n\ @return\ the\ {@code\ JLabel}\r\n
comment8.params=
comment8.target=void\ setOriginUpperLeft()
comment8.text=\r\n\ Sets\ the\ origin\ to\ be\ the\ upper\ left\ pixel.\ This\ is\ the\ default.\r\n
comment9.params=
comment9.target=void\ setOriginLowerLeft()
comment9.text=\r\n\ Sets\ the\ origin\ to\ be\ the\ lower\ left\ pixel.\r\n
numComments=30
